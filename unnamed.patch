Index: data_gen_utils/plot_mask.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data_gen_utils/plot_mask.py b/data_gen_utils/plot_mask.py
--- a/data_gen_utils/plot_mask.py	
+++ b/data_gen_utils/plot_mask.py	(date 1740194516076)
@@ -3,6 +3,7 @@
 import cv2
 from PIL import Image
 import json
+DATA = None
 # 处理绘制的图像，转换为掩膜
 def process_drawing(drawing):
     # 将绘制的图像转换为灰度图像
@@ -14,17 +15,43 @@
 
     # 创建单通道掩膜图像并保存，确保是L模式（单通道灰度图）
     mask_image = Image.fromarray(mask_array * 255, mode="L")  # 使用 "L" 模式来确保单通道
-    save_path = "draw_mask2.png"
+    save_path = "draw_mask_penguin.png"
     mask_image.save(save_path)  # 保存为PNG格式（单通道）
 
     # 返回处理后的掩膜图像（单通道）
     return mask_image
 
 
+def get_image_path(da_n, ins_id, edit_id, data):
+    """动态获取图像路径的封装函数"""
+    try:
+        # 转换参数类型为字符串（JSON键通常为字符串）
+        da_n = str(da_n)
+        ins_id = str(ins_id)
+        edit_id = str(edit_id)
 
-def create_ui(image_path):
+        return data[da_n]['instances'][ins_id][edit_id]['coarse_input_path']
+    except KeyError as e:
+        print(f"路径参数错误: {str(e)}")
+        return None
+    except Exception as e:
+        print(f"其他错误: {str(e)}")
+        return None
+
+def create_ui(imagejson_path):
+    global DATA
+    DATA = load_json(json_path)
     with gr.Blocks() as demo: # 显示原始图像
+        # 参数输入行
+        with gr.Row():
+            da_input = gr.Textbox(label="案例号 (da_n)", value="102")
+            ins_input = gr.Textbox(label="实例ID (ins_id)", value="0")
+            edit_input = gr.Textbox(label="编辑ID (edit_id)", value="0")
+
+        image_path = DATA[da_input]['instances'][ins_input][edit_input]['coarse_input_path']
+        # 定义图像路径
         # 创建绘图区域，启用图像编辑
+
         drawing = gr.Image(value=image_path, label="Draw the Mask", type="pil", interactive=True, tool="sketch",height=512, width=512,brush_color='#FFFFFF', mask_opacity=0.5, brush_radius=30)
 
         # 创建保存按钮
@@ -55,15 +82,16 @@
     return None
 
 
-data = load_json("/data/Hszhu/dataset/PIE-Bench_v1/Subset_0/coarse_input_full_pack_0.json")
-da_n = '102'
-da = data[da_n]
-instances = da['instances']
-edit_meta = instances['0']
-coarse_input_pack = edit_meta['0']
-# 定义图像路径
-image_path = coarse_input_pack['coarse_input_path']
+# data = load_json("/data/Hszhu/dataset/PIE-Bench_v1/Subset_0/coarse_input_full_pack_0.json")
+# da_n = '102'
+# da = data[da_n]
+# instances = da['instances']
+# edit_meta = instances['0']
+# coarse_input_pack = edit_meta['0']
+# # 定义图像路径
+# image_path = coarse_input_pack['coarse_input_path']
+# image_path = "/data/Hszhu/Reggio/data_gen_utils/new_edit_cr.png"
 
 # 创建并启动 Gradio UI
-ui = create_ui(image_path)
+ui = create_ui("/data/Hszhu/dataset/Geo-Bench-SC/annotations.json")
 ui.launch()
\ No newline at end of file
